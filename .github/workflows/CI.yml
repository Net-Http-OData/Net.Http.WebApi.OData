name: CI
on:
  push:
  pull_request:

env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Do not extract XML documentation files from nuget packages
  NUGET_XMLDOC_MODE: skip
  PROJECT_CONFIGURATION: Release
  PROJECT_PATH: '.\Net.Http.WebApi.OData\Net.Http.WebApi.OData.csproj'
  SOLUTION_NAME: Net.Http.WebApi.OData.sln
  TEST_PROJECT: Net.Http.WebApi.OData.Tests

jobs:
  build:
    name: Build
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Setup VSTest Path
      uses: darenm/Setup-VSTest@v1

    - name: Setup NuGet
      uses: nuget/setup-nuget@v1

    - name: Restore NuGet Packages
      run: nuget restore ${{ env.SOLUTION_NAME }}

    - name: MSBuild
      run: msbuild ${{ env.SOLUTION_NAME }} /p:Configuration=${{ env.PROJECT_CONFIGURATION }}

    - name: VSTest
      run: vstest.console.exe /Platform:x64 '.\${{ env.TEST_PROJECT }}\bin\${{ env.PROJECT_CONFIGURATION }}\${{ env.TEST_PROJECT }}.dll'

    - name: dotnet pack (pre-release)
      if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
      run: |
        $date = Get-Date -Format "yyyyMMdd"
        $projVersion = ([xml](Get-Content ${{ env.PROJECT_PATH }})) | Select-Xml -XPath "//Project/PropertyGroup[1]/Version"
        dotnet pack ${{ env.PROJECT_PATH }} --configuration ${{ env.PROJECT_CONFIGURATION }} -p:PackageVersion="$projVersion-preview$date.${{ github.run_id }}"
      shell: pwsh

    - name: dotnet pack
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        $projVersion = ([xml](Get-Content ${{ env.PROJECT_PATH }})) | Select-Xml -XPath "//Project/PropertyGroup[1]/Version"
        dotnet pack ${{ env.PROJECT_PATH }} --configuration ${{ env.PROJECT_CONFIGURATION }} -p:PackageVersion="$projVersion"
      shell: pwsh

#    - name: dotnet nuget push
#      if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master')
#      run: dotnet nuget push '/home/runner/work/**/*.nupkg' --api-key ${{ secrets.NUGET_API_KEY }} --source ${{ env.NUGET_SOURCE }}
